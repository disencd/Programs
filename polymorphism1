class AudioFile:
    def __init__(self, filename):
        if not filename.endswith(self.ext):
            raise Exception("Invalid file format")
        self.filename = filename

class MP3File(AudioFile):
    ext = "mp3"
    def play(self):
        print("playing {} as mp3".format(self.filename))

class WavFile(AudioFile):
    ext = "wav"
    def play(self):
        print("playing {} as wav".format(self.filename))

class OggFile(AudioFile):
    ext = "ogg"
    def play(self):
        print("playing {} as ogg".format(self.filename))


ogg = OggFile("myfile.ogg")
ogg.play()

mp3 = MP3File("myfile.mp3")
mp3.play()

not_an_mp3 = MP3File("myfile.ogg")

'''
playing myfile.ogg as ogg
playing myfile.mp3 as mp3
Traceback (most recent call last):
  File "polymorphism1.py", line 29, in <module>
    not_an_mp3 = MP3File("myfile.ogg")
  File "polymorphism1.py", line 4, in __init__
    raise Exception("Invalid file format")
Exception: Invalid file format
'''

'''
 All audio files check to ensure that a valid extension was
 given upon initialization. But notice how the __init__ method
 in the parent class is able to access the ext class variable
 from different subclasses? That's polymorphism at work. If the
 filename doesn't end with the correct name, it raises an
 exception (exceptions will be covered in detail in the next
 chapter). The fact that AudioFile doesn't actually store a
 reference to the ext variable doesn't stop it from being able
 to access it on the subclass.
'''
